/*
# 다이나믹 프로그래밍
- 다이나믹 프로그래밍은 한 번 계산한 문제의 정답을 메모리에 저장하여 다시 계산하지 않도록 하는 기법이다.
- 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 합니다.

- 다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식으로 구성됩니다.
  1. 탑다운 방식(하향식): 재귀적으로 구현
  2. 보텀업 방식(상향식): 반복문으로 구현

- 다이나믹 프로그래밍의 사용 조건
  1. 큰 문제를 작은 문제로 나눌 수 있다.
  2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

- 다이나믹 프로그래밍 유형 파악하기
  1. 특정 문제를 완전 탐색 알고리즘으로 접근하였는데 시간이 매우 오래걸린다면,
  해결하고자 하는 부분 문제들의 중복 여부를 확인해 다이나믹 프로그래밍 적용 할 수 있는지 알아본다.
  2. 일단 재귀 함수를 구현 한 뒤, 메모제이션을 적용할 수 있으면 코드를 개선해 나아가는 방법도 좋다.
  3. 스택 오버플로우를 방지하기 위해 가능한 바텀업 방식으로 구현하자.

# 다이나믹 프로그래밍 vs 분할 정복
- 다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있다.
- 다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복이다.
  1. 다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
  2. 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.

# 다이나믹 프로그래밍 문제 해결 방법
- 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요하다.
- 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토할 수 있다.
- 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해보자.

  https://gyyeom.tistory.com/116
*/

// 예제. 파보나치 수열
// - 다이나믹 프로그래밍을 사용하지 않은 경우
function fibo(x) {
  if (x === 1 || x === 2) {
    return 1;
  }
  return fibo(x - 1) + fibo(x - 2);
}
console.log(fibo(4)); // 3
console.log(fibo(10)); // 55

// - 다이나믹 프로그래밍을 사용한 경우
let d = Array(100).fill(0);

function fibo_dp(x) {
  if (x === 1 || x === 2) {
    return 1;
  }
  if (d[x] !== 0) {
    return d[x];
  }
  d[x] = fibo_dp(x - 1) + fibo_dp(x - 2);
  return d[x];
}
